# coding=utf8
from config import *

alarm_scheduler_chuancai = BackgroundScheduler()


def search_applog():
    start = time.time()
    logger.info("start to search applog")
    sql_dest = "select * from event_rrp_v2 order by appeartime desc, timestamp desc limit 1"
    df_dest = pd.read_sql(sql_dest, db_dest)
    if len(df_dest) > 0:
        appeartime = df_dest.loc[0, 'appeartime']
        logger.info("last appeartime: %s" % appeartime)
        sql_applog = "select userId as user_id, eventId as event_id, eventName event_name, detail, appeartime from applog_source_11 where appeartime >= '%s' order by appeartime, id desc" % (appeartime)
        df_applog = pd.read_sql(sql_applog, db_applog)
        df_applog['timestamp'] = df_applog.detail.str.extract('.+"timestamp"\s*:\s*(\d+),?.+').astype(int)
        df_applog = df_applog.sort_values(by='timestamp').reset_index()
        index = df_applog[(df_applog.event_id == df_dest.loc[0, 'event_id']) \
                          & (df_applog.cardName == int(df_dest.loc[0, 'cardName'])) \
                          & (df_applog.dashboardId == int(df_dest.loc[0, 'dashboardId'])) \
                          & (df_applog.user_id == df_dest.loc[0, 'user_id']) \
                          & (df_applog.appeartime == df_dest.loc[0, 'appeartime'])].index.tolist()[0]
        df_applog = df_applog[(index + 1):]
    else:
        sql_applog = "select userId as user_id, eventId as event_id, eventName event_name, detail, appeartime from applog_source_11 order by appeartime"
        df_applog = pd.read_sql(sql_applog, db_applog)
        df_applog['timestamp'] = df_applog.detail.str.extract('.+"timestamp"\s*:\s*(\d+),?.+').astype(int)
    logger.info("search applog costs: %d ms, find %d records" % ((time.time() - start), len(df_applog)))
    df_applog = df_applog.merge(get_df_user(), how='left')
    return df_applog

sql_applog = "select * from applog_source_11 order by id desc"
df_applog = pd.read_sql(sql_applog, db_applog)
df_applog['timestamp'] = df_applog.detail.str.extract('.+"timestamp"\s*:\s*(\d+),?.+').astype(int)
df_applog['dashboardId'] = df_applog.detail.str.extract('.+"dashboardId"\s*:\s*"(.+?)",?.+')
df_applog['cardName'] = df_applog.detail.str.extract('.+"cardName"\s*:\s*"(.+?)",?.+')
df_applog['dashboardName'] = df_applog.detail.str.extract('.+"dashboardName"\s*:\s*"(.+?)",?.+')
df_applog['to'] = df_applog.detail.str.extract('.+"to"\s*:\s*"(.+?)",?.+')
df_applog = df_applog.fillna('')
df_applog['dashboardId'] = df_applog['dashboardId'] + df_applog['to']
df_applog['date'] = df_applog['timestamp'].floordiv(86400000)
df_applog['date'] = df_applog['date'] * 86400000
df_applog['date'] = pd.to_datetime(df_applog.date, unit='ms')
df_applog['groupable_ts'] = df_applog['timestamp'].floordiv(600000)
df_applog['groupable_ts'] = df_applog['groupable_ts'] * 600000
df_applog['appeartime'] = pd.to_datetime(df_applog['groupable_ts'], unit='ms')

@alarm_scheduler_chuancai.scheduled_job('cron', id='handle_report_keyword', hour='3')
def handle_report_keyword():
    event_id = '1001,1002'
    df_result = search_applog(event_id)
    df_result['keyword'] = df_result.detail.str.extract('.+"r?q"\s*:\s*"(.+?)".+')
    del df_result['detail']
    save_df(df_result, 'user_event_rrp')
    return df_result


@alarm_scheduler_chuancai.scheduled_job('cron', id='handle_report_theme', hour='3')
def handle_report_theme():
    event_id = '1174,1176'
    df_result = search_applog(event_id)
    df_result['keyword'] = df_result.detail.str.extract('.+"actl?n"\s*:\s*"(.+?)".+')
    del df_result['detail']
    save_df(df_result, 'user_event_rrp')
    return df_result


@alarm_scheduler_chuancai.scheduled_job('cron', id='handle_report_stock', hour='3')
def handle_report_stock():
    event_id = '1172,1173'
    df_result = search_applog(event_id)
    try:
        if len(df_result) > 0:
            df_result['ticker_symbol'] = df_result.detail.str.extract('.+"ac[sf]l"\s*:\s*".+?_(\d{6})_.+".+')
            df_result = df_result.merge(get_df_md(), how='left')
    except Exception as e:
        logger.info(e.message)
    del df_result['detail']
    save_df(df_result, 'user_event_rrp')
    return df_result


@alarm_scheduler_chuancai.scheduled_job('cron', id='handle_research', hour='3')
def handle_research():
    event_id = '1148,1151'
    df_result = search_applog(event_id)
    try:
        if len(df_result) > 0:
            df_result['research_id'] = df_result.detail.str.extract('.+"wzid"\s*:\s*(\d+),.+').dropna().astype(int)
            df_result = df_result.merge(get_df_rpt(), how='left').merge(get_df_md(), how='left')
    except Exception as e:
        logger.info(e.message)
    del df_result['detail']
    save_df(df_result, 'user_event_rrp')
    return df_result
